{
  "Formul치rio Mestre Detalhe Adianti": {
    "prefix": "adianti_form_mestre_detalhe",
    "body": [
      "class VendaForm extends TPage {",
      "    protected \\$form;",
      "    private \\$formFields = [];",
      "    private static \\$database = 'exemplos';",
      "    private static \\$activeRecord = 'Venda';",
      "    private static \\$primaryKey = 'id';",
      "    private static \\$formName = 'form_Venda';",
      "",
      "    use Adianti\\Base\\AdiantiMasterDetailTrait;",
      "",
      "    /**",
      "     * Form constructor",
      "     * @param \\$param Request",
      "     */",
      "    public function __construct(\\$param) {",
      "        parent::__construct();",
      "",
      "        if(!empty(\\$param['target_container'])) {",
      "            \\$this->adianti_target_container = \\$param['target_container'];",
      "        }",
      "",
      "        // creates the form",
      "        \\$this->form = new BootstrapFormBuilder(self::\\$formName);",
      "        // define the form title",
      "        \\$this->form->setFormTitle(\"Formul치rio mestre detalhe\");",
      "",
      "        \\$id = new TEntry('id');",
      "        \\$dt_venda = new TDateTime('dt_venda');",
      "        \\$cliente = new TEntry('cliente');",
      "        \\$vendedor = new TEntry('vendedor');",
      "        \\$venda_item_venda_produto_id = new TDBUniqueSearch('venda_item_venda_produto_id', 'exemplos', 'Produto', 'id', 'nome','id asc');",
      "        \\$venda_item_venda_quantidade = new TNumeric('venda_item_venda_quantidade', '2', ',', '.');",
      "        \\$venda_item_venda_valor = new TNumeric('venda_item_venda_valor', '2', ',', '.');",
      "        \\$venda_item_venda_id = new THidden('venda_item_venda_id');",
      "",
      "        \\$venda_item_venda_produto_id->setChangeAction(new TAction([\\$this,'onChangeProduto']));",
      "",
      "        \\$cliente->addValidation(\"Cliente\", new TRequiredValidator());",
      "",
      "        \\$dt_venda->setDatabaseMask('yyyy-mm-dd hh:ii');",
      "        \\$venda_item_venda_produto_id->setMinLength(1);",
      "        \\$id->setEditable(false);",
      "        \\$venda_item_venda_valor->setEditable(false);",
      "",
      "        \\$dt_venda->setMask('dd/mm/yyyy hh:ii');",
      "        \\$venda_item_venda_produto_id->setMask('{nome}');",
      "",
      "        \\$id->setSize(100);",
      "        \\$dt_venda->setSize(140);",
      "        \\$cliente->setSize('100%');",
      "        \\$vendedor->setSize('100%');",
      "        \\$venda_item_venda_valor->setSize('100%');",
      "        \\$venda_item_venda_produto_id->setSize('100%');",
      "        \\$venda_item_venda_quantidade->setSize('100%');",
      "",
      "        \\$row1 = \\$this->form->addFields([new TLabel(\"Id:\", null, '14px', null)],[\\$id],[new TLabel(\"Data da venda:\", null, '14px', null)],[\\$dt_venda]);",
      "        \\$row2 = \\$this->form->addFields([new TLabel(\"Cliente:\", '#ff0000', '14px', null)],[\\$cliente],[new TLabel(\"Vendedor:\", null, '14px', null)],[\\$vendedor]);",
      "        \\$row3 = \\$this->form->addContent([new TFormSeparator(\"Produtos\", '#333333', '18', '#eeeeee')]);",
      "        \\$row4 = \\$this->form->addFields([new TLabel(\"Produto:\", '#ff0000', '14px', null)],[\\$venda_item_venda_produto_id],[],[]);",
      "        \\$row5 = \\$this->form->addFields([new TLabel(\"Quantidade:\", null, '14px', null)],[\\$venda_item_venda_quantidade],[new TLabel(\"Valor:\", null, '14px', null)],[\\$venda_item_venda_valor]);",
      "        \\$row6 = \\$this->form->addFields([\\$venda_item_venda_id]);",
      "        \\$add_venda_item_venda = new TButton('add_venda_item_venda');",
      "",
      "        \\$action_venda_item_venda = new TAction([\\$this, 'onAddVendaItemVenda']);",
      "",
      "        \\$add_venda_item_venda->setAction(\\$action_venda_item_venda, \"Adicionar\");",
      "        \\$add_venda_item_venda->setImage('fas:plus #000000');",
      "",
      "        \\$this->form->addFields([\\$add_venda_item_venda]);",
      "",
      "        \\$detailDatagrid = new TQuickGrid;",
      "        \\$detailDatagrid->disableHtmlConversion();",
      "        \\$this->venda_item_venda_list = new BootstrapDatagridWrapper(\\$detailDatagrid);",
      "        \\$this->venda_item_venda_list->style = 'width:100%';",
      "        \\$this->venda_item_venda_list->class .= ' table-bordered';",
      "        \\$this->venda_item_venda_list->disableDefaultClick();",
      "        \\$this->venda_item_venda_list->addQuickColumn('', 'edit', 'left', 50);",
      "        \\$this->venda_item_venda_list->addQuickColumn('', 'delete', 'left', 50);",
      "",
      "        \\$column_venda_item_venda_produto_id = \\$this->venda_item_venda_list->addQuickColumn(\"Produto\", 'venda_item_venda_produto_id', 'left');",
      "        \\$column_venda_item_venda_quantidade = \\$this->venda_item_venda_list->addQuickColumn(\"Quantidade\", 'venda_item_venda_quantidade', 'right');",
      "        \\$column_venda_item_venda_valor_transformed = \\$this->venda_item_venda_list->addQuickColumn(\"Valor\", 'venda_item_venda_valor', 'right');",
      "        \\$column_calculated_1 = \\$this->venda_item_venda_list->addQuickColumn(\"Total do item\", '=( {venda_item_venda_quantidade} * {venda_item_venda_valor}  )', 'right');",
      "",
      "        \\$column_calculated_1->setTotalFunction(function(\\$values) {",
      "            return array_sum((array) \\$values);",
      "        });",
      "",
      "        \\$this->venda_item_venda_list->createModel();",
      "        \\$this->form->addContent([\\$this->venda_item_venda_list]);",
      "",
      "        \\$column_venda_item_venda_valor_transformed->setTransformer(function(\\$value, \\$object, \\$row, \\$cell = null, \\$last_row = null) {",
      "            if(!\\$value) {",
      "                \\$value = 0;",
      "            }",
      "",
      "            if(is_numeric(\\$value)) {",
      "                return \"R$ \" . number_format((double)\\$value, 2, \",\", \".\");",
      "            }",
      "            else {",
      "                return \\$value;",
      "            }",
      "        });",
      "",
      "        \\$column_calculated_1->setTransformer(function(\\$value, \\$object, \\$row, \\$cell = null, \\$last_row = null) {",
      "            if(!\\$value) {",
      "                \\$value = 0;",
      "            }",
      "",
      "            if(is_numeric(\\$value)) {",
      "                return \"R$ \" . number_format((double)\\$value, 2, \",\", \".\");",
      "            }",
      "            else {",
      "                return \\$value;",
      "            }",
      "        });",
      "",
      "        // create the form actions",
      "        \\$btn_onsave = \\$this->form->addAction(\"Salvar\", new TAction([\\$this, 'onSave']), 'far:save #ffffff');",
      "        \\$this->btn_onsave = \\$btn_onsave;",
      "        \\$btn_onsave->addStyleClass('btn-primary');",
      "",
      "        \\$btn_onclear = \\$this->form->addAction(\"Limpar formul치rio\", new TAction([\\$this, 'onClear']), 'fas:eraser #dd5a43');",
      "        \\$this->btn_onclear = \\$btn_onclear;",
      "",
      "        // vertical box container",
      "        \\$container = new TVBox;",
      "        \\$container->style = 'width: 100%';",
      "        \\$container->class = 'form-container';",
      "        if(empty(\\$param['target_container'])) {",
      "            \\$container->add(TBreadCrumb::create([\"Formul치rios\",\"Mestre detalhe\"]));",
      "        }",
      "        \\$container->add(\\$this->form);",
      "",
      "        parent::add(\\$container);",
      "    }",
      "",
      "    public static function onChangeProduto(\\$param = null) {",
      "        try {",
      "            TTransaction::open('exemplos');",
      "            \\$produto = new Produto(\\$param['key']);",
      "            TTransaction::close();",
      "",
      "            \\$object = new stdClass();",
      "            \\$object->venda_item_venda_valor = number_format((double)\\$produto->preco_venda, 2 , ',', '.');",
      "",
      "            TForm::sendData(self::\\$formName, \\$object);",
      "        }",
      "        catch (Exception \\$e) {",
      "            new TMessage('error', \\$e->getMessage());",
      "        }",
      "    }",
      "",
      "    public function onSave(\\$param = null) {",
      "        try {",
      "            TTransaction::open(self::\\$database); // open a transaction",
      "",
      "            /**",
      "            // Enable Debug logger for SQL operations inside the transaction",
      "            TTransaction::setLogger(new TLoggerSTD); // standard output",
      "            TTransaction::setLogger(new TLoggerTXT('log.txt')); // file",
      "            **/",
      "",
      "            \\$messageAction = null;",
      "",
      "            \\$this->form->validate(); // validate form data",
      "",
      "            \\$object = new Venda(); // create an empty object",
      "",
      "            \\$data = \\$this->form->getData(); // get form data as array",
      "            \\$object->fromArray((array) \\$data); // load the object with data",
      "",
      "            \\$object->store(); // save the object",
      "",
      "            \\$venda_item_venda_items = \\$this->storeItems('VendaItem', 'venda_id', \\$object, 'venda_item_venda', function(\\$masterObject, \\$detailObject) {",
      "                //code here",
      "            });",
      "",
      "            // get the generated {PRIMARY_KEY}",
      "            \\$data->id = \\$object->id;",
      "",
      "            \\$this->form->setData(\\$data); // fill form data",
      "            TTransaction::close(); // close the transaction",
      "",
      "            /**",
      "            // To define an action to be executed on the message close event:",
      "            \\$messageAction = new TAction(['className', 'methodName']);",
      "            **/",
      "",
      "            new TMessage('info', AdiantiCoreTranslator::translate('Record saved'), \\$messageAction);",
      "        }",
      "        catch (Exception \\$e) { // in case of exception",
      "            new TMessage('error', \\$e->getMessage()); // shows the exception error message",
      "            \\$this->form->setData(\\$this->form->getData()); // keep form data",
      "            TTransaction::rollback(); // undo all pending operations",
      "        }",
      "    }",
      "",
      "    public function onEdit(\\$param) {",
      "        try {",
      "            if (isset(\\$param['key'])) {",
      "                \\$key = \\$param['key'];  // get the parameter \\$key",
      "                TTransaction::open(self::\\$database); // open a transaction",
      "",
      "                \\$object = new Venda(\\$key); // instantiates the Active Record",
      "",
      "                \\$venda_item_venda_items = \\$this->loadItems('VendaItem', 'venda_id', \\$object, 'venda_item_venda', function(\\$masterObject, \\$detailObject, \\$objectItems) {",
      "                });",
      "",
      "                \\$this->form->setData(\\$object); // fill the form",
      "",
      "                \\$this->onReload();",
      "",
      "                TTransaction::close(); // close the transaction",
      "            }",
      "            else {",
      "                \\$this->form->clear();",
      "            }",
      "        }",
      "        catch (Exception \\$e) { // in case of exception",
      "            new TMessage('error', \\$e->getMessage()); // shows the exception error message",
      "            TTransaction::rollback(); // undo all pending operations",
      "        }",
      "    }",
      "",
      "    /**",
      "     * Clear form data",
      "     * @param \\$param Request",
      "     */",
      "    public function onClear(\\$param) {",
      "        \\$this->form->clear(true);",
      "",
      "        TSession::setValue('venda_item_venda_items', null);",
      "",
      "        \\$this->onReload();",
      "    }",
      "",
      "    public function onAddVendaItemVenda(\\$param) {",
      "        try {",
      "            \\$data = \\$this->form->getData();",
      "",
      "            if(!\\$data->venda_item_venda_produto_id) {",
      "                throw new Exception(AdiantiCoreTranslator::translate('The field ^1 is required', \"Produto id\"));",
      "            }",
      "",
      "            \\$venda_item_venda_items = TSession::getValue('venda_item_venda_items');",
      "            \\$key = isset(\\$data->venda_item_venda_id) && \\$data->venda_item_venda_id ? \\$data->venda_item_venda_id : 'b'.uniqid();",
      "            \\$fields = [];",
      "",
      "            \\$fields['venda_item_venda_produto_id'] = \\$data->venda_item_venda_produto_id;",
      "            \\$fields['venda_item_venda_quantidade'] = \\$data->venda_item_venda_quantidade;",
      "            \\$fields['venda_item_venda_valor'] = \\$data->venda_item_venda_valor;",
      "            \\$venda_item_venda_items[\\$key] = \\$fields;",
      "",
      "            TSession::setValue('venda_item_venda_items', \\$venda_item_venda_items);",
      "",
      "            \\$data->venda_item_venda_id = '';",
      "            \\$data->venda_item_venda_produto_id = '';",
      "            \\$data->venda_item_venda_quantidade = '';",
      "            \\$data->venda_item_venda_valor = '';",
      "",
      "            \\$this->form->setData(\\$data);",
      "",
      "            \\$this->onReload(\\$param);",
      "        }",
      "        catch (Exception \\$e) {",
      "            \\$this->form->setData(\\$this->form->getData());",
      "",
      "            new TMessage('error', \\$e->getMessage());",
      "        }",
      "    }",
      "",
      "    public function onEditVendaItemVenda(\\$param) {",
      "        \\$data = \\$this->form->getData();",
      "",
      "        // read session items",
      "        \\$items = TSession::getValue('venda_item_venda_items');",
      "",
      "        // get the session item",
      "        \\$item = \\$items[\\$param['venda_item_venda_id_row_id']];",
      "",
      "        \\$data->venda_item_venda_produto_id = \\$item['venda_item_venda_produto_id'];",
      "        \\$data->venda_item_venda_quantidade = \\$item['venda_item_venda_quantidade'];",
      "        \\$data->venda_item_venda_valor = \\$item['venda_item_venda_valor'];",
      "",
      "        \\$data->venda_item_venda_id = \\$param['venda_item_venda_id_row_id'];",
      "",
      "        // fill product fields",
      "        \\$this->form->setData(\\$data);",
      "",
      "        \\$this->onReload(\\$param);",
      "    }",
      "",
      "    public function onDeleteVendaItemVenda(\\$param) {",
      "        \\$data = \\$this->form->getData();",
      "",
      "        \\$data->venda_item_venda_produto_id = '';",
      "        \\$data->venda_item_venda_quantidade = '';",
      "        \\$data->venda_item_venda_valor = '';",
      "",
      "        // clear form data",
      "        \\$this->form->setData(\\$data);",
      "",
      "        // read session items",
      "        \\$items = TSession::getValue('venda_item_venda_items');",
      "",
      "        // delete the item from session",
      "        unset(\\$items[\\$param['venda_item_venda_id_row_id']]);",
      "        TSession::setValue('venda_item_venda_items', \\$items);",
      "",
      "        // reload sale items",
      "        \\$this->onReload(\\$param);",
      "    }",
      "",
      "    public function onReloadVendaItemVenda(\\$param) {",
      "        \\$items = TSession::getValue('venda_item_venda_items');",
      "",
      "        \\$this->venda_item_venda_list->clear();",
      "",
      "        if(\\$items) {",
      "            \\$cont = 1;",
      "            foreach (\\$items as \\$key => \\$item) {",
      "                \\$rowItem = new StdClass;",
      "",
      "                \\$action_del = new TAction([\\$this, 'onDeleteVendaItemVenda']);",
      "                \\$action_del->setParameter('venda_item_venda_id_row_id', \\$key);",
      "                \\$action_del->setParameter('row_data', base64_encode(serialize(\\$item)));",
      "                \\$action_del->setParameter('key', \\$key);",
      "",
      "                \\$action_edi = new TAction([\\$this, 'onEditVendaItemVenda']);",
      "                \\$action_edi->setParameter('venda_item_venda_id_row_id', \\$key);",
      "                \\$action_edi->setParameter('row_data', base64_encode(serialize(\\$item)));",
      "                \\$action_edi->setParameter('key', \\$key);",
      "",
      "                \\$button_del = new TButton('delete_venda_item_venda'.\\$cont);",
      "                \\$button_del->setAction(\\$action_del, '');",
      "                \\$button_del->setFormName(\\$this->form->getName());",
      "                \\$button_del->class = 'btn btn-link btn-sm';",
      "                \\$button_del->title = \"Excluir\";",
      "                \\$button_del->setImage('far:trash-alt #dd5a43');",
      "",
      "                \\$rowItem->delete = \\$button_del;",
      "",
      "                \\$button_edi = new TButton('edit_venda_item_venda'.\\$cont);",
      "                \\$button_edi->setAction(\\$action_edi, '');",
      "                \\$button_edi->setFormName(\\$this->form->getName());",
      "                \\$button_edi->class = 'btn btn-link btn-sm';",
      "                \\$button_edi->title = \"Editar\";",
      "                \\$button_edi->setImage('far:edit #478fca');",
      "",
      "                \\$rowItem->edit = \\$button_edi;",
      "",
      "                \\$rowItem->venda_item_venda_produto_id = '';",
      "                if(isset(\\$item['venda_item_venda_produto_id']) && \\$item['venda_item_venda_produto_id']) {",
      "                    TTransaction::open('exemplos');",
      "                    \\$produto = Produto::find(\\$item['venda_item_venda_produto_id']);",
      "                    if(\\$produto) {",
      "                        \\$rowItem->venda_item_venda_produto_id = \\$produto->render('{nome}');",
      "                    }",
      "                    TTransaction::close();",
      "                }",
      "",
      "                \\$rowItem->venda_item_venda_quantidade = isset(\\$item['venda_item_venda_quantidade']) ? \\$item['venda_item_venda_quantidade'] : '';",
      "                \\$rowItem->venda_item_venda_valor = isset(\\$item['venda_item_venda_valor']) ? \\$item['venda_item_venda_valor'] : '';",
      "",
      "                \\$row = \\$this->venda_item_venda_list->addItem(\\$rowItem);",
      "",
      "                \\$cont++;",
      "            }",
      "        }",
      "    }",
      "",
      "    public function onShow(\\$param = null) {",
      "        TSession::setValue('venda_item_venda_items', null);",
      "        \\$this->onReload();",
      "    }",
      "",
      "    public function onReload(\\$params = null) {",
      "        \\$this->loaded = TRUE;",
      "        \\$this->onReloadVendaItemVenda(\\$params);",
      "    }",
      "",
      "    public function show() {",
      "        if (!\\$this->loaded AND (!isset(\\$_GET['method']) OR \\$_GET['method'] !== 'onReload')) {",
      "            \\$this->onReload(func_get_arg(0));",
      "        }",
      "        parent::show();",
      "    }",
      "}"
    ],
    "description": "Formul치rio mestre detalhe Adianti",
    "link": "https://www.madbuilder.com.br/exemplo-mestre-detalhe"
  }
}