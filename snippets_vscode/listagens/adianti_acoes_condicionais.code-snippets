{
  "Listagem com ações condicionais Adianti": {
    "prefix": "adianti_acoes_condicionais",
    "body": [
      "class ProdutoList extends TPage",
      "{",
      "    private $form;",
      "    private $datagrid;",
      "    private $pageNavigation;",
      "    private $loaded;",
      "    private $filter_criteria;",
      "    private static $database = 'exemplos';",
      "    private static $activeRecord = 'Produto';",
      "    private static $primaryKey = 'id';",
      "    private static $formName = 'formList_Produto';",
      "    private $showMethods = ['onReload', 'onSearch', 'onRefresh', 'onClearFilters'];",
      "    private $limit = 20;",
      "",
      "    public function __construct($param = null)",
      "    {",
      "        parent::__construct();",
      "        if (!empty($param['target_container']))",
      "        {",
      "            $this->adianti_target_container = $param['target_container'];",
      "        }",
      "        $this->form = new BootstrapFormBuilder(self::$formName);",
      "        $this->form->setFormTitle(\"Ações condicionais\");",
      "",
      "        $nome = new TEntry('nome');",
      "        $tipo_produto_id = new TDBCombo('tipo_produto_id', 'exemplos', 'TipoProduto', 'id', '{nome}','nome asc');",
      "        $nome->setSize('70%');",
      "        $tipo_produto_id->setSize('70%');",
      "        $this->form->addFields([new TLabel(\"Nome:\")], [$nome]);",
      "        $this->form->addFields([new TLabel(\"Tipo produto:\")], [$tipo_produto_id]);",
      "",
      "        $this->form->setData( TSession::getValue(__CLASS__.'_filter_data') );",
      "",
      "        $btn_onsearch = $this->form->addAction(\"Buscar\", new TAction([$this, 'onSearch']), 'fas:search #ffffff');",
      "        $btn_onsearch->addStyleClass('btn-primary');",
      "",
      "        $btn_onexportcsv = $this->form->addAction(\"Exportar como CSV\", new TAction([$this, 'onExportCsv']), 'far:file-alt #000000');",
      "        $btn_onshow = $this->form->addAction(\"Cadastrar\", new TAction(['TipoProdutoForm', 'onShow']), 'fas:plus #69aa46');",
      "",
      "        $this->datagrid = new BootstrapDatagridWrapper(new TDataGrid);",
      "        $this->datagrid->disableHtmlConversion();",
      "        $this->datagrid->style = 'width: 100%';",
      "        $this->datagrid->setHeight(320);",
      "        $this->filter_criteria = new TCriteria;",
      "",
      "        $column_id = new TDataGridColumn('id', \"Id\", 'center', '78px');",
      "        $column_nome = new TDataGridColumn('nome', \"Nome\", 'left');",
      "        $column_tipo_produto_nome = new TDataGridColumn('tipo_produto->nome', \"Tipo produto\", 'left');",
      "        $column_cod_barras = new TDataGridColumn('cod_barras', \"Código de barras\", 'left');",
      "        $column_preco_custo = new TDataGridColumn('preco_custo', \"Preço de custo\", 'left');",
      "        $column_preco_venda = new TDataGridColumn('preco_venda', \"Preço de venda\", 'left');",
      "",
      "        $column_preco_custo->setTransformer(function($value) { return is_numeric($value) ? \"R$ \" . number_format($value, 2, \",\", \".\") : $value; });",
      "        $column_preco_venda->setTransformer(function($value) { return is_numeric($value) ? \"R$ \" . number_format($value, 2, \",\", \".\") : $value; });",
      "",
      "        $order_id = new TAction([$this, 'onReload']);",
      "        $order_id->setParameter('order', 'id');",
      "        $column_id->setAction($order_id);",
      "",
      "        $this->datagrid->addColumn($column_id);",
      "        $this->datagrid->addColumn($column_nome);",
      "        $this->datagrid->addColumn($column_tipo_produto_nome);",
      "        $this->datagrid->addColumn($column_cod_barras);",
      "        $this->datagrid->addColumn($column_preco_custo);",
      "        $this->datagrid->addColumn($column_preco_venda);",
      "",
      "        $action_onEdit = new TDataGridAction(['TipoProdutoForm', 'onEdit']);",
      "        $action_onEdit->setLabel(\"Editar\");",
      "        $action_onEdit->setImage('far:edit #478fca');",
      "        $action_onEdit->setField(self::$primaryKey);",
      "        $this->datagrid->addAction($action_onEdit);",
      "",
      "        $action_onDelete = new TDataGridAction(['ProdutoList', 'onDelete']);",
      "        $action_onDelete->setLabel(\"Excluir\");",
      "        $action_onDelete->setImage('far:trash-alt #dd5a43');",
      "        $action_onDelete->setField(self::$primaryKey);",
      "        $this->datagrid->addAction($action_onDelete);",
      "",
      "        $action_onMoney = new TDataGridAction(['ProdutoList', 'onMoney']);",
      "        $action_onMoney->setImage('far:money-bill-alt #059e39');",
      "        $action_onMoney->setField(self::$primaryKey);",
      "        $action_onMoney->setDisplayCondition('ProdutoList::onShowValor');",
      "        $this->datagrid->addAction($action_onMoney);",
      "",
      "        $this->datagrid->createModel();",
      "",
      "        $this->pageNavigation = new TPageNavigation;",
      "        $this->pageNavigation->setAction(new TAction([$this, 'onReload']));",
      "",
      "        $panel = new TPanelGroup();",
      "        $panel->add($this->datagrid);",
      "        $panel->addFooter($this->pageNavigation);",
      "",
      "        $container = new TVBox;",
      "        $container->add($this->form);",
      "        $container->add($panel);",
      "",
      "        parent::add($container);",
      "    }",
      "",
      "    public function onDelete($param = null)",
      "    {",
      "        if (isset($param['delete']) && $param['delete'] == 1)",
      "        {",
      "            try {",
      "                $key = $param['key'];",
      "                TTransaction::open(self::$database);",
      "                $object = new Produto($key, FALSE);",
      "                $object->delete();",
      "                TTransaction::close();",
      "                $this->onReload($param);",
      "                new TMessage('info', AdiantiCoreTranslator::translate('Record deleted'));",
      "            } catch (Exception $e) {",
      "                new TMessage('error', $e->getMessage());",
      "                TTransaction::rollback();",
      "            }",
      "        }",
      "        else",
      "        {",
      "            $action = new TAction([$this, 'onDelete']);",
      "            $action->setParameters($param);",
      "            $action->setParameter('delete', 1);",
      "            new TQuestion(AdiantiCoreTranslator::translate('Do you really want to delete ?'), $action);",
      "        }",
      "    }",
      "",
      "    public function onMoney($param = null)",
      "    {",
      "        new TMessage('info', 'Você clicou em um item que custa mais do que R$ 3000,00 reais');",
      "    }",
      "",
      "    public static function onShowValor($object)",
      "    {",
      "        return (int)$object->preco_venda > 3000;",
      "    }",
      "",
      "    public function onExportCsv($param = null)",
      "    {",
      "        try {",
      "            $this->onSearch();",
      "            TTransaction::open(self::$database);",
      "            $repository = new TRepository(self::$activeRecord);",
      "            $criteria = new TCriteria;",
      "            if ($filters = TSession::getValue(__CLASS__.'_filters'))",
      "            {",
      "                foreach ($filters as $filter)",
      "                { $criteria->add($filter); }",
      "            }",
      "            $records = $repository->load($criteria);",
      "            if ($records)",
      "            {",
      "                $file = 'tmp/'.uniqid().'.csv';",
      "                $handle = fopen($file, 'w');",
      "                fputcsv($handle, array_map(function($c){ return $c->getLabel(); }, $this->datagrid->getColumns()), ';');",
      "                foreach ($records as $record)",
      "                {",
      "                    $row = [];",
      "                    foreach ($this->datagrid->getColumns() as $column)",
      "                    {",
      "                        $row[] = $record->{$column->getName()};",
      "                    }",
      "                    fputcsv($handle, $row, ';');",
      "                }",
      "                fclose($handle);",
      "                TPage::openFile($file);",
      "            }",
      "            else",
      "            { new TMessage('info', _t('No records found')); }",
      "            TTransaction::close();",
      "        } catch (Exception $e) {",
      "            new TMessage('error', $e->getMessage());",
      "            TTransaction::rollback();",
      "        }",
      "    }",
      "",
      "    public function onSearch($param = null)",
      "    {",
      "        $data = $this->form->getData();",
      "        $filters = [];",
      "        TSession::setValue(__CLASS__.'_filter_data', $data);",
      "        if (!empty($data->nome))",
      "        { $filters[] = new TFilter('nome', 'like', \"%{$data->nome}%\"); }",
      "        if (!empty($data->tipo_produto_id))",
      "        { $filters[] = new TFilter('tipo_produto_id', '=', $data->tipo_produto_id); }",
      "        TSession::setValue(__CLASS__.'_filters', $filters);",
      "        $this->onReload(['offset' => 0, 'first_page' => 1]);",
      "    }",
      "",
      "    public function onReload($param = NULL)",
      "    {",
      "        try {",
      "            TTransaction::open(self::$database);",
      "            $repository = new TRepository(self::$activeRecord);",
      "            $criteria = clone $this->filter_criteria;",
      "            $criteria->setProperties($param);",
      "            $criteria->setProperty('limit', $this->limit);",
      "            $objects = $repository->load($criteria, FALSE);",
      "            $this->datagrid->clear();",
      "            if ($objects) foreach ($objects as $object) { $this->datagrid->addItem($object); }",
      "            $criteria->resetProperties();",
      "            $count = $repository->count($criteria);",
      "            $this->pageNavigation->setCount($count);",
      "            $this->pageNavigation->setProperties($param);",
      "            $this->pageNavigation->setLimit($this->limit);",
      "            TTransaction::close();",
      "            $this->loaded = true;",
      "        } catch (Exception $e) {",
      "            new TMessage('error', $e->getMessage());",
      "            TTransaction::rollback();",
      "        }",
      "    }",
      "}"
    ],
    "description": "Listagem com ações condicionais Adianti",
    "link": "https://www.madbuilder.com.br/exemplo-acoes-condicionais#",
  }
}
