{
  "Formulário com abas Adiantis": {
    "prefix": "adianti_form_abas",
    "body": [
      "class FuncionarioAbasForm extends TPage {",
      "    protected \\$form;",
      "    private \\$formFields = [];",
      "    private static \\$database = 'exemplos';",
      "    private static \\$activeRecord = 'Funcionario';",
      "    private static \\$primaryKey = 'id';",
      "    private static \\$formName = 'form_Funcionario';",
      "",
      "    /**",
      "     * Form constructor",
      "     * @param \\$param Request",
      "     */",
      "    public function __construct(\\$param) {",
      "        parent::__construct();",
      "",
      "        if(!empty(\\$param['target_container'])) {",
      "            \\$this->adianti_target_container = \\$param['target_container'];",
      "        }",
      "",
      "        // creates the form",
      "        \\$this->form = new BootstrapFormBuilder(self::\\$formName);",
      "        // define the form title",
      "        \\$this->form->setFormTitle(\"Formulário com abas\");",
      "",
      "        \\$id = new TEntry('id');",
      "        \\$dt_nascimento = new TDate('dt_nascimento');",
      "        \\$nome = new TEntry('nome');",
      "        \\$sobrenome = new TEntry('sobrenome');",
      "        \\$cidade_estado_pais_id = new TDBCombo('cidade_estado_pais_id', 'exemplos', 'Pais', 'id', '{nome}','nome asc');",
      "        \\$cidade_estado_id = new TCombo('cidade_estado_id');",
      "        \\$cidade_id = new TCombo('cidade_id');",
      "        \\$cep = new TEntry('cep');",
      "        \\$endereco = new TEntry('endereco');",
      "        \\$funcao_id = new TDBCombo('funcao_id', 'exemplos', 'Funcao', 'id', '{nome}','nome asc');",
      "        \\$habilidades = new TDBMultiSearch('habilidades', 'exemplos', 'Habilidades', 'id', 'nome','nome asc');",
      "",
      "        \\$cidade_estado_pais_id->setChangeAction(new TAction([\\$this,'onChangecidade_estado_pais_id']));",
      "        \\$cidade_estado_id->setChangeAction(new TAction([\\$this,'onChangecidade_estado_id']));",
      "",
      "        \\$dt_nascimento->addValidation(\"Data de nascimento\", new TRequiredValidator());",
      "        \\$nome->addValidation(\"Nome\", new TRequiredValidator());",
      "        \\$sobrenome->addValidation(\"Sobrenome\", new TRequiredValidator());",
      "        \\$cidade_id->addValidation(\"Cidade id\", new TRequiredValidator());",
      "        \\$funcao_id->addValidation(\"Funcao id\", new TRequiredValidator());",
      "",
      "        \\$id->setEditable(false);",
      "        \\$dt_nascimento->setDatabaseMask('yyyy-mm-dd');",
      "        \\$habilidades->setMinLength(2);",
      "        \\$habilidades->setMask('{nome}');",
      "        \\$dt_nascimento->setMask('dd/mm/yyyy');",
      "",
      "        \\$id->setSize(100);",
      "        \\$cep->setSize('100%');",
      "        \\$nome->setSize('100%');",
      "        \\$endereco->setSize('100%');",
      "        \\$sobrenome->setSize('100%');",
      "        \\$cidade_id->setSize('100%');",
      "        \\$funcao_id->setSize('100%');",
      "        \\$dt_nascimento->setSize(110);",
      "        \\$habilidades->setSize('100%', 68);",
      "        \\$cidade_estado_id->setSize('100%');",
      "        \\$cidade_estado_pais_id->setSize('100%');",
      "",
      "        \\$this->form->appendPage(\"Dados pessoais\");",
      "",
      "        \\$this->form->addFields([new THidden('current_tab')]);",
      "        \\$this->form->setTabFunction(\"\\$('[name=current_tab]').val(\\$(this).attr('data-current_page'));\");",
      "",
      "        \\$row1 = \\$this->form->addFields([new TLabel(\"Id:\", null, '14px', null)],[\\$id],[new TLabel(\"Data de nascimento:\", '#ff0000', '14px', null)],[\\$dt_nascimento]);",
      "        \\$row2 = \\$this->form->addFields([new TLabel(\"Nome:\", '#ff0000', '14px', null)],[\\$nome],[new TLabel(\"Sobrenome:\", '#ff0000', '14px', null)],[\\$sobrenome]);",
      "",
      "        \\$this->form->appendPage(\"Endereço\");",
      "        \\$row3 = \\$this->form->addFields([new TLabel(\"País:\", '#ff0000', '14px', null)],[\\$cidade_estado_pais_id],[new TLabel(\"Estado:\", '#ff0000', '14px', null)],[\\$cidade_estado_id]);",
      "        \\$row4 = \\$this->form->addFields([new TLabel(\"Cidade:\", '#ff0000', '14px', null)],[\\$cidade_id],[new TLabel(\"CEP:\", '#ff0000', '14px', null)],[\\$cep]);",
      "        \\$row5 = \\$this->form->addFields([new TLabel(\"Endereco:\", '#ff0000', '14px', null)],[\\$endereco]);",
      "",
      "        \\$this->form->appendPage(\"Capacitação\");",
      "        \\$row6 = \\$this->form->addFields([new TLabel(\"Funcao id:\", '#ff0000', '14px', null)],[\\$funcao_id]);",
      "        \\$row7 = \\$this->form->addFields([new TLabel(\"Habilidades\", null, '14px', null)],[\\$habilidades]);",
      "",
      "        // create the form actions",
      "        \\$btn_onsave = \\$this->form->addAction(\"Salvar\", new TAction([\\$this, 'onSave']), 'far:save #ffffff');",
      "        \\$this->btn_onsave = \\$btn_onsave;",
      "        \\$btn_onsave->addStyleClass('btn-primary');",
      "",
      "        \\$btn_onclear = \\$this->form->addAction(\"Limpar formulário\", new TAction([\\$this, 'onClear']), 'fas:eraser #dd5a43');",
      "        \\$this->btn_onclear = \\$btn_onclear;",
      "",
      "        // vertical box container",
      "        \\$container = new TVBox;",
      "        \\$container->style = 'width: 100%';",
      "        \\$container->class = 'form-container';",
      "        if(empty(\\$param['target_container'])) {",
      "            \\$container->add(TBreadCrumb::create([\"Formulários\",\"Formulário com abas\"]));",
      "        }",
      "        \\$container->add(\\$this->form);",
      "",
      "        parent::add(\\$container);",
      "    }",
      "",
      "    public static function onChangecidade_estado_pais_id(\\$param) {",
      "        try {",
      "            if (isset(\\$param['cidade_estado_pais_id']) && \\$param['cidade_estado_pais_id']) {",
      "                \\$criteria = TCriteria::create(['pais_id' => \\$param['cidade_estado_pais_id']]);",
      "                TDBCombo::reloadFromModel(self::\\$formName, 'cidade_estado_id', 'exemplos', 'Estado', 'id', '{nome}', 'nome asc', \\$criteria, TRUE);",
      "            }",
      "            else {",
      "                TCombo::clearField(self::\\$formName, 'cidade_estado_id');",
      "            }",
      "        }",
      "        catch (Exception \\$e) {",
      "            new TMessage('error', \\$e->getMessage());",
      "        }",
      "    }",
      "",
      "    public static function onChangecidade_estado_id(\\$param) {",
      "        try {",
      "            if (isset(\\$param['cidade_estado_id']) && \\$param['cidade_estado_id']) {",
      "                \\$criteria = TCriteria::create(['estado_id' => \\$param['cidade_estado_id']]);",
      "                TDBCombo::reloadFromModel(self::\\$formName, 'cidade_id', 'exemplos', 'Cidade', 'id', '{nome}', 'nome asc', \\$criteria, TRUE);",
      "            }",
      "            else {",
      "                TCombo::clearField(self::\\$formName, 'cidade_id');",
      "            }",
      "        }",
      "        catch (Exception \\$e) {",
      "            new TMessage('error', \\$e->getMessage());",
      "        }",
      "    }",
      "",
      "    public function onSave(\\$param = null) {",
      "        try {",
      "            TTransaction::open(self::\\$database); // open a transaction",
      "",
      "            /**",
      "            // Enable Debug logger for SQL operations inside the transaction",
      "            TTransaction::setLogger(new TLoggerSTD); // standard output",
      "            TTransaction::setLogger(new TLoggerTXT('log.txt')); // file",
      "            **/",
      "",
      "            \\$messageAction = null;",
      "",
      "            \\$this->form->validate(); // validate form data",
      "",
      "            \\$object = new Funcionario(); // create an empty object",
      "",
      "            \\$data = \\$this->form->getData(); // get form data as array",
      "            \\$object->fromArray((array) \\$data); // load the object with data",
      "",
      "            \\$object->store(); // save the object",
      "",
      "            \\$this->fireEvents(\\$object);",
      "",
      "            \\$repository = HabilidadesFuncionario::where('funcionario_id', '=', \\$object->id);",
      "            \\$repository->delete();",
      "",
      "            if (\\$data->habilidades) {",
      "                foreach (\\$data->habilidades as \\$habilidades_value) {",
      "                    \\$habilidades_funcionario = new HabilidadesFuncionario;",
      "                    \\$habilidades_funcionario->habilidades_id = \\$habilidades_value;",
      "                    \\$habilidades_funcionario->funcionario_id = \\$object->id;",
      "                    \\$habilidades_funcionario->store();",
      "                }",
      "            }",
      "",
      "            // get the generated {PRIMARY_KEY}",
      "            \\$data->id = \\$object->id;",
      "",
      "            \\$this->form->setData(\\$data); // fill form data",
      "            TTransaction::close(); // close the transaction",
      "",
      "            /**",
      "            // To define an action to be executed on the message close event:",
      "            \\$messageAction = new TAction(['className', 'methodName']);",
      "            **/",
      "",
      "            new TMessage('info', AdiantiCoreTranslator::translate('Record saved'), \\$messageAction);",
      "        }",
      "        catch (Exception \\$e) { // in case of exception",
      "            new TMessage('error', \\$e->getMessage()); // shows the exception error message",
      "            \\$this->form->setData(\\$this->form->getData()); // keep form data",
      "            TTransaction::rollback(); // undo all pending operations",
      "        }",
      "    }",
      "",
      "    public function onEdit(\\$param) {",
      "        try {",
      "            if (isset(\\$param['key'])) {",
      "                \\$key = \\$param['key'];  // get the parameter \\$key",
      "                TTransaction::open(self::\\$database); // open a transaction",
      "",
      "                \\$object = new Funcionario(\\$key); // instantiates the Active Record",
      "",
      "                \\$object->cidade_estado_pais_id = \\$object->cidade->estado->pais->id;",
      "                \\$object->cidade_estado_id = \\$object->cidade->estado->id;",
      "",
      "                \\$object->habilidades = HabilidadesFuncionario::where('funcionario_id', '=', \\$object->id)->getIndexedArray('habilidades_id', 'habilidades_id');",
      "",
      "                \\$this->form->setData(\\$object); // fill the form",
      "",
      "                \\$this->fireEvents(\\$object);",
      "",
      "                TTransaction::close(); // close the transaction",
      "            }",
      "            else {",
      "                \\$this->form->clear();",
      "            }",
      "        }",
      "        catch (Exception \\$e) { // in case of exception",
      "            new TMessage('error', \\$e->getMessage()); // shows the exception error message",
      "            TTransaction::rollback(); // undo all pending operations",
      "        }",
      "    }",
      "",
      "    /**",
      "     * Clear form data",
      "     * @param \\$param Request",
      "     */",
      "    public function onClear(\\$param) {",
      "        \\$this->form->clear(true);",
      "    }",
      "",
      "    public function onShow(\\$param = null) {",
      "",
      "    }",
      "",
      "    public function fireEvents(\\$object) {",
      "        \\$obj = new stdClass;",
      "        if(is_object(\\$object) && get_class(\\$object) == 'stdClass') {",
      "            if(isset(\\$object->cidade_estado_pais_id)) {",
      "                \\$value = \\$object->cidade_estado_pais_id;",
      "                \\$obj->cidade_estado_pais_id = \\$value;",
      "            }",
      "            if(isset(\\$object->cidade_estado_id)) {",
      "                \\$value = \\$object->cidade_estado_id;",
      "                \\$obj->cidade_estado_id = \\$value;",
      "            }",
      "            if(isset(\\$object->cidade_id)) {",
      "                \\$value = \\$object->cidade_id;",
      "                \\$obj->cidade_id = \\$value;",
      "            }",
      "        }",
      "        elseif(is_object(\\$object)) {",
      "            if(isset(\\$object->cidade->estado->pais->id)) {",
      "                \\$value = \\$object->cidade->estado->pais->id;",
      "                \\$obj->cidade_estado_pais_id = \\$value;",
      "            }",
      "            if(isset(\\$object->cidade->estado->id)) {",
      "                \\$value = \\$object->cidade->estado->id;",
      "                \\$obj->cidade_estado_id = \\$value;",
      "            }",
      "            if(isset(\\$object->cidade_id)) {",
      "                \\$value = \\$object->cidade_id;",
      "                \\$obj->cidade_id = \\$value;",
      "            }",
      "        }",
      "        TForm::sendData(self::\\$formName, \\$obj);",
      "    }",
      "",
      "    public function minhaFuncao(\\$param = null) {",
      "        try {",
      "            //code here",
      "        }",
      "        catch (Exception \\$e) {",
      "            new TMessage('error', \\$e->getMessage());",
      "        }",
      "    }",
      "",
      "    public function segundaFuncao(\\$param = null) {",
      "        try {",
      "            //code here",
      "        }",
      "        catch (Exception \\$e) {",
      "            new TMessage('error', \\$e->getMessage());",
      "        }",
      "    }",
      "}"
    ],
    "description": "Formulário com abas Adianti",
    "link": "https://www.madbuilder.com.br/exemplo-com-abas"
  }
}