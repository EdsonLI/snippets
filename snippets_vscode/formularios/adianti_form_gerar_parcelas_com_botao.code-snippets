{
  "Formulário Conta com geração automática de parcelas Adianti": {
    "prefix": "adianti_form_conta_parcelas",
    "body": [
      "class ContaDetalheForm extends TPage {",
      "    protected \\$form;",
      "    private \\$formFields = [];",
      "    private static \\$database = 'exemplos';",
      "    private static \\$activeRecord = 'Conta';",
      "    private static \\$primaryKey = 'id';",
      "    private static \\$formName = 'form_Conta';",
      "",
      "    use Adianti\\Base\\AdiantiMasterDetailTrait;",
      "",
      "    /**",
      "     * Form constructor",
      "     * @param \\$param Request",
      "     */",
      "    public function __construct(\\$param) {",
      "        parent::__construct();",
      "",
      "        if(!empty(\\$param['target_container'])) {",
      "            \\$this->adianti_target_container = \\$param['target_container'];",
      "        }",
      "",
      "        // creates the form",
      "        \\$this->form = new BootstrapFormBuilder(self::\\$formName);",
      "        // define the form title",
      "        \\$this->form->setFormTitle(\"Gerar registros de detalhe automaticamente\");",
      "",
      "        \\$id = new TEntry('id');",
      "        \\$valor = new TEntry('valor');",
      "        \\$parcelas = new TEntry('parcelas');",
      "        \\$dt_vencimento = new TDate('dt_vencimento');",
      "        \\$button_gerar_parcelas = new TButton('button_gerar_parcelas');",
      "        \\$parcela_conta_valor = new TEntry('parcela_conta_valor');",
      "        \\$parcela_conta_num_parcela = new TEntry('parcela_conta_num_parcela');",
      "        \\$parcela_conta_dt_vencimento = new TDate('parcela_conta_dt_vencimento');",
      "        \\$parcela_conta_id = new THidden('parcela_conta_id');",
      "",
      "        \\$id->setEditable(false);",
      "        \\$button_gerar_parcelas->setAction(new TAction([\\$this, 'gerarParcelas']), \"Gerar parcelas\");",
      "        \\$button_gerar_parcelas->addStyleClass('btn-success');",
      "        \\$button_gerar_parcelas->setImage('far:money-bill-alt #ffffff');",
      "        \\$dt_vencimento->setMask('dd/mm/yyyy');",
      "        \\$parcela_conta_dt_vencimento->setMask('dd/mm/yyyy');",
      "",
      "        \\$dt_vencimento->setDatabaseMask('yyyy-mm-dd');",
      "        \\$parcela_conta_dt_vencimento->setDatabaseMask('yyyy-mm-dd');",
      "",
      "        \\$id->setSize(100);",
      "        \\$valor->setSize('70%');",
      "        \\$parcelas->setSize('70%');",
      "        \\$dt_vencimento->setSize(110);",
      "        \\$parcela_conta_valor->setSize('70%');",
      "        \\$parcela_conta_num_parcela->setSize('70%');",
      "        \\$parcela_conta_dt_vencimento->setSize(110);",
      "",
      "        \\$row1 = \\$this->form->addFields([new TLabel(\"Id:\", null, '14px', null)],[\\$id]);",
      "        \\$row2 = \\$this->form->addFields([new TLabel(\"Valor:\", null, '14px', null)],[\\$valor]);",
      "        \\$row3 = \\$this->form->addFields([new TLabel(\"Parcelas:\", null, '14px', null)],[\\$parcelas]);",
      "        \\$row4 = \\$this->form->addFields([new TLabel(\"Data de vencimento\", null, '14px', null)],[\\$dt_vencimento,\\$button_gerar_parcelas]);",
      "        \\$row5 = \\$this->form->addContent([new TFormSeparator(\"Parcelas\", '#333333', '18', '#eeeeee')]);",
      "        \\$row6 = \\$this->form->addFields([new TLabel(\"Valor:\", null, '14px', null)],[\\$parcela_conta_valor]);",
      "        \\$row7 = \\$this->form->addFields([new TLabel(\"Num parcela:\", null, '14px', null)],[\\$parcela_conta_num_parcela]);",
      "        \\$row8 = \\$this->form->addFields([new TLabel(\"Dt vencimento:\", null, '14px', null)],[\\$parcela_conta_dt_vencimento]);",
      "        \\$row9 = \\$this->form->addFields([\\$parcela_conta_id]);",
      "        \\$add_parcela_conta = new TButton('add_parcela_conta');",
      "",
      "        \\$action_parcela_conta = new TAction([\\$this, 'onAddParcelaConta']);",
      "",
      "        \\$add_parcela_conta->setAction(\\$action_parcela_conta, \"Adicionar\");",
      "        \\$add_parcela_conta->setImage('fas:plus #000000');",
      "",
      "        \\$this->form->addFields([\\$add_parcela_conta]);",
      "",
      "        \\$detailDatagrid = new TQuickGrid;",
      "        \\$detailDatagrid->disableHtmlConversion();",
      "        \\$this->parcela_conta_list = new BootstrapDatagridWrapper(\\$detailDatagrid);",
      "        \\$this->parcela_conta_list->style = 'width:100%';",
      "        \\$this->parcela_conta_list->class .= ' table-bordered';",
      "        \\$this->parcela_conta_list->disableDefaultClick();",
      "        \\$this->parcela_conta_list->addQuickColumn('', 'edit', 'left', 50);",
      "        \\$this->parcela_conta_list->addQuickColumn('', 'delete', 'left', 50);",
      "",
      "        \\$column_parcela_conta_valor_transformed = \\$this->parcela_conta_list->addQuickColumn(\"Valor\", 'parcela_conta_valor', 'left');",
      "        \\$column_parcela_conta_num_parcela = \\$this->parcela_conta_list->addQuickColumn(\"Número parcela\", 'parcela_conta_num_parcela', 'left');",
      "        \\$column_parcela_conta_dt_vencimento = \\$this->parcela_conta_list->addQuickColumn(\"Data de vencimento\", 'parcela_conta_dt_vencimento', 'left');",
      "",
      "        \\$this->parcela_conta_list->createModel();",
      "        \\$this->form->addContent([\\$this->parcela_conta_list]);",
      "",
      "        \\$column_parcela_conta_valor_transformed->setTransformer(function(\\$value, \\$object, \\$row, \\$cell = null, \\$last_row = null) {",
      "            if(!\\$value) {",
      "                \\$value = 0;",
      "            }",
      "",
      "            if(is_numeric(\\$value)) {",
      "                return \"R$ \" . number_format((double)\\$value, 2, \",\", \".\");",
      "            }",
      "            else {",
      "                return \\$value;",
      "            }",
      "        });",
      "",
      "        // create the form actions",
      "        \\$btn_onsave = \\$this->form->addAction(\"Salvar\", new TAction([\\$this, 'onSave']), 'far:save #ffffff');",
      "        \\$this->btn_onsave = \\$btn_onsave;",
      "        \\$btn_onsave->addStyleClass('btn-primary');",
      "",
      "        \\$btn_onclear = \\$this->form->addAction(\"Limpar formulário\", new TAction([\\$this, 'onClear']), 'fas:eraser #dd5a43');",
      "        \\$this->btn_onclear = \\$btn_onclear;",
      "",
      "        // vertical box container",
      "        \\$container = new TVBox;",
      "        \\$container->style = 'width: 100%';",
      "        \\$container->class = 'form-container';",
      "        if(empty(\\$param['target_container'])) {",
      "            \\$container->add(TBreadCrumb::create([\"Formulários\",\"Gerar registros em detalhe dinamicamente por um botão no formulário\"]));",
      "        }",
      "        \\$container->add(\\$this->form);",
      "",
      "        parent::add(\\$container);",
      "    }",
      "",
      "    public static function gerarParcelas(\\$param = null) {",
      "        try {",
      "            if (empty(\\$param['valor']) OR empty(\\$param['parcelas'])) {",
      "                return false;",
      "            }",
      "",
      "            \\$dt_vencimento = new DateTime(TDate::date2us(\\$param['dt_vencimento']));",
      "            \\$dt_vencimento->modify('previous month');",
      "",
      "            \\$valor_parcela = \\$param['valor'] / \\$param['parcelas'];",
      "            \\$parcela_conta_items = TSession::getValue('parcela_conta_items');",
      "",
      "            for (\\$i=1; \\$i <= \\$param['parcelas']; \\$i++) {",
      "                \\$dt_vencimento->modify('next month');",
      "                \\$fields['parcela_conta_valor'] = \\$valor_parcela;",
      "                \\$fields['parcela_conta_num_parcela'] = \\$i;",
      "                \\$fields['parcela_conta_dt_vencimento'] = \\$dt_vencimento->format('d/m/Y');",
      "",
      "                \\$parcela_conta_items[uniqid()] = \\$fields;",
      "            }",
      "",
      "            TSession::setValue('parcela_conta_items', \\$parcela_conta_items);",
      "            unset(\\$param['static']);",
      "            TApplication::loadPage('ContaDetalheForm', 'onEdit', \\$param);",
      "        }",
      "        catch (Exception \\$e) {",
      "            new TMessage('error', \\$e->getMessage());",
      "        }",
      "    }",
      "",
      "    public function onSave(\\$param = null) {",
      "        try {",
      "            TTransaction::open(self::\\$database); // open a transaction",
      "",
      "            /**",
      "            // Enable Debug logger for SQL operations inside the transaction",
      "            TTransaction::setLogger(new TLoggerSTD); // standard output",
      "            TTransaction::setLogger(new TLoggerTXT('log.txt')); // file",
      "            **/",
      "",
      "            \\$messageAction = null;",
      "",
      "            \\$this->form->validate(); // validate form data",
      "",
      "            \\$object = new Conta(); // create an empty object",
      "",
      "            \\$data = \\$this->form->getData(); // get form data as array",
      "            \\$object->fromArray((array) \\$data); // load the object with data",
      "",
      "            \\$object->store(); // save the object",
      "",
      "            \\$parcela_conta_items = \\$this->storeItems('Parcela', 'conta_id', \\$object, 'parcela_conta', function(\\$masterObject, \\$detailObject) {",
      "                //code here",
      "            });",
      "",
      "            // get the generated {PRIMARY_KEY}",
      "            \\$data->id = \\$object->id;",
      "",
      "            \\$this->form->setData(\\$data); // fill form data",
      "            TTransaction::close(); // close the transaction",
      "",
      "            /**",
      "            // To define an action to be executed on the message close event:",
      "            \\$messageAction = new TAction(['className', 'methodName']);",
      "            **/",
      "",
      "            new TMessage('info', AdiantiCoreTranslator::translate('Record saved'), \\$messageAction);",
      "        }",
      "        catch (Exception \\$e) { // in case of exception",
      "            new TMessage('error', \\$e->getMessage()); // shows the exception error message",
      "            \\$this->form->setData(\\$this->form->getData()); // keep form data",
      "            TTransaction::rollback(); // undo all pending operations",
      "        }",
      "    }",
      "",
      "    public function onEdit(\\$param) {",
      "        try {",
      "            if (isset(\\$param['key'])) {",
      "                \\$key = \\$param['key'];  // get the parameter \\$key",
      "                TTransaction::open(self::\\$database); // open a transaction",
      "                \\$object = new Conta(\\$key); // instantiates the Active Record",
      "",
      "                \\$parcela_conta_items = \\$this->loadItems('Parcela', 'conta_id', \\$object, 'parcela_conta', function(\\$masterObject, \\$detailObject, \\$objectItems) {",
      "                    //code here",
      "                });",
      "                \\$this->form->setData(\\$object); // fill the form",
      "                \\$this->onReload();",
      "",
      "                TTransaction::close(); // close the transaction",
      "            }",
      "            else {",
      "                if (!empty(\\$param['valor'])) {",
      "                    \\$this->form->setData((object)\\$param);",
      "                }",
      "                else {",
      "                    \\$this->form->clear();",
      "                }",
      "            }",
      "        }",
      "        catch (Exception \\$e) { // in case of exception",
      "            new TMessage('error', \\$e->getMessage()); // shows the exception error message",
      "            TTransaction::rollback(); // undo all pending operations",
      "        }",
      "    }",
      "",
      "    /**",
      "     * Clear form data",
      "     * @param \\$param Request",
      "     */",
      "    public function onClear(\\$param) {",
      "        \\$this->form->clear(true);",
      "",
      "        TSession::setValue('parcela_conta_items', null);",
      "",
      "        \\$this->onReload();",
      "    }",
      "",
      "    public function onAddParcelaConta(\\$param) {",
      "        try {",
      "            \\$data = \\$this->form->getData();",
      "",
      "            \\$parcela_conta_items = TSession::getValue('parcela_conta_items');",
      "            \\$key = isset(\\$data->parcela_conta_id) && \\$data->parcela_conta_id ? \\$data->parcela_conta_id : 'b'.uniqid();",
      "            \\$fields = [];",
      "",
      "            \\$fields['parcela_conta_valor'] = \\$data->parcela_conta_valor;",
      "            \\$fields['parcela_conta_num_parcela'] = \\$data->parcela_conta_num_parcela;",
      "            \\$fields['parcela_conta_dt_vencimento'] = \\$data->parcela_conta_dt_vencimento;",
      "            \\$parcela_conta_items[\\$key] = \\$fields;",
      "",
      "            TSession::setValue('parcela_conta_items', \\$parcela_conta_items);",
      "",
      "            \\$data->parcela_conta_id = '';",
      "            \\$data->parcela_conta_valor = '';",
      "            \\$data->parcela_conta_num_parcela = '';",
      "            \\$data->parcela_conta_dt_vencimento = '';",
      "",
      "            \\$this->form->setData(\\$data);",
      "",
      "            \\$this->onReload(\\$param);",
      "        }",
      "        catch (Exception \\$e) {",
      "            \\$this->form->setData(\\$this->form->getData());",
      "",
      "            new TMessage('error', \\$e->getMessage());",
      "        }",
      "    }",
      "",
      "    public function onEditParcelaConta(\\$param) {",
      "        \\$data = \\$this->form->getData();",
      "",
      "        // read session items",
      "        \\$items = TSession::getValue('parcela_conta_items');",
      "",
      "        // get the session item",
      "        \\$item = \\$items[\\$param['parcela_conta_id_row_id']];",
      "",
      "        \\$data->parcela_conta_valor = \\$item['parcela_conta_valor'];",
      "        \\$data->parcela_conta_num_parcela = \\$item['parcela_conta_num_parcela'];",
      "        \\$data->parcela_conta_dt_vencimento = \\$item['parcela_conta_dt_vencimento'];",
      "",
      "        \\$data->parcela_conta_id = \\$param['parcela_conta_id_row_id'];",
      "",
      "        // fill product fields",
      "        \\$this->form->setData(\\$data);",
      "",
      "        \\$this->onReload(\\$param);",
      "    }",
      "",
      "    public function onDeleteParcelaConta(\\$param) {",
      "        \\$data = \\$this->form->getData();",
      "",
      "        \\$data->parcela_conta_valor = '';",
      "        \\$data->parcela_conta_num_parcela = '';",
      "        \\$data->parcela_conta_dt_vencimento = '';",
      "",
      "        // clear form data",
      "        \\$this->form->setData(\\$data);",
      "",
      "        // read session items",
      "        \\$items = TSession::getValue('parcela_conta_items');",
      "",
      "        // delete the item from session",
      "        unset(\\$items[\\$param['parcela_conta_id_row_id']]);",
      "        TSession::setValue('parcela_conta_items', \\$items);",
      "",
      "        // reload sale items",
      "        \\$this->onReload(\\$param);",
      "    }",
      "",
      "    public function onReloadParcelaConta(\\$param) {",
      "        \\$items = TSession::getValue('parcela_conta_items');",
      "",
      "        \\$this->parcela_conta_list->clear();",
      "",
      "        if(\\$items) {",
      "            \\$cont = 1;",
      "            foreach (\\$items as \\$key => \\$item) {",
      "                \\$rowItem = new StdClass;",
      "",
      "                \\$action_del = new TAction([\\$this, 'onDeleteParcelaConta']);",
      "                \\$action_del->setParameter('parcela_conta_id_row_id', \\$key);",
      "                \\$action_del->setParameter('row_data', base64_encode(serialize(\\$item)));",
      "                \\$action_del->setParameter('key', \\$key);",
      "",
      "                \\$action_edi = new TAction([\\$this, 'onEditParcelaConta']);",
      "                \\$action_edi->setParameter('parcela_conta_id_row_id', \\$key);",
      "                \\$action_edi->setParameter('row_data', base64_encode(serialize(\\$item)));",
      "                \\$action_edi->setParameter('key', \\$key);",
      "",
      "                \\$button_del = new TButton('delete_parcela_conta'.\\$cont);",
      "                \\$button_del->setAction(\\$action_del, '');",
      "                \\$button_del->setFormName(\\$this->form->getName());",
      "                \\$button_del->class = 'btn btn-link btn-sm';",
      "                \\$button_del->title = \"Excluir\";",
      "                \\$button_del->setImage('far:trash-alt #dd5a43');",
      "",
      "                \\$rowItem->delete = \\$button_del;",
      "",
      "                \\$button_edi = new TButton('edit_parcela_conta'.\\$cont);",
      "                \\$button_edi->setAction(\\$action_edi, '');",
      "                \\$button_edi->setFormName(\\$this->form->getName());",
      "                \\$button_edi->class = 'btn btn-link btn-sm';",
      "                \\$button_edi->title = \"Editar\";",
      "                \\$button_edi->setImage('far:edit #478fca');",
      "",
      "                \\$rowItem->edit = \\$button_edi;",
      "",
      "                \\$rowItem->parcela_conta_valor = isset(\\$item['parcela_conta_valor']) ? \\$item['parcela_conta_valor'] : '';",
      "                \\$rowItem->parcela_conta_num_parcela = isset(\\$item['parcela_conta_num_parcela']) ? \\$item['parcela_conta_num_parcela'] : '';",
      "                \\$rowItem->parcela_conta_dt_vencimento = isset(\\$item['parcela_conta_dt_vencimento']) ? \\$item['parcela_conta_dt_vencimento'] : '';",
      "",
      "                \\$row = \\$this->parcela_conta_list->addItem(\\$rowItem);",
      "",
      "                \\$cont++;",
      "            }",
      "        }",
      "    }",
      "",
      "    public function onShow(\\$param = null) {",
      "        TSession::setValue('parcela_conta_items', null);",
      "        \\$this->onReload();",
      "    }",
      "",
      "    public function onReload(\\$params = null) {",
      "        \\$this->loaded = TRUE;",
      "        \\$this->onReloadParcelaConta(\\$params);",
      "    }",
      "",
      "    public function show() {",
      "        if (!\\$this->loaded AND (!isset(\\$_GET['method']) OR \\$_GET['method'] !== 'onReload')) {",
      "            \\$this->onReload(func_get_arg(0));",
      "        }",
      "        parent::show();",
      "    }",
      "}"
    ],
    "description": "Formulário de Conta com geração automática de parcelas com botão de geração dinâmica",
    "link": "https://www.madbuilder.com.br/exemplo-gerar-registros-em-detalhe-dinamicamente-por-um-botao-no-formulario"
  }
}